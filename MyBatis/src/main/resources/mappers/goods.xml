<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goods">
    <!--    开启二级缓存-->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true" />
    <!--
    eviction 清除策略, 和页面置换算法类似, 当缓存对象达到上限后, 自动触发清除
        1.LRU 清除最近最久未使用的对象, 默认
        2.LFU, 清除最近访问频率最低的对象
        3.FIFO 先进先出, 清除最先进来的对象
        4.SOFT 软引用, 清除基于 垃圾回收期状态和软引用规则的对象, 不推荐
        5.WEAK 弱引用, 更积极地清除基于 垃圾回收期状态和软引用规则的对象, 不推荐

    flushInterval 每隔多少毫秒清除缓存
    size 缓存多少个对象或者集合(一个集合算一个对象)
    readOnly 设置为 true, 代表返回只读缓存, 每次从缓存对象本身, 这种执行效率较高
             设置为false, 可读可写, 代表每次取出的是缓存对象的"副本", 每一次取出的对象是不同的,安全性较高
    -->


    <!-- 如果不用LIMIT, 对于查询结果的数量比较大, 返回的是一个list的, 一般不用二级缓存, 因为这样命中率不高-->
    <select id="selectAll" resultType="indi.chester.mybatis.entity.Goods" useCache="false">
        select * from  t_goods ORDER BY  goods_id DESC LIMIT 10
    </select>

    <!-- 希望执行完这一句之后立刻清空缓存, 而不是等待commit 或者关闭 SqlSession 对象-->
    <insert id="insertflush" parameterType="indi.chester.mybatis.entity.Goods" flushCache="true">
        INSERT INTO babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,category_id)
        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
    </insert>

    <select id="selectById" parameterType="Integer" resultType="indi.chester.mybatis.entity.Goods">
        select * from  t_goods WHERE goods_id=#{value }
    </select>

    <!-- 多参数传递时利用 Map, 键为参数名, 值为参数值-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="indi.chester.mybatis.entity.Goods">
        select * from   t_goods WHERE current_price BETWEEN  #{min} and #{max}
        ORDER BY current_price  LIMIT 0, #{limit}
    </select>

    <!--  利用 LinkedHashMap 保存多表关联结果, 键为字段名, 值为数值-->
    <select id="selectGoodsMap"  resultType="java.util.LinkedHashMap" >
        select g.*, c.category_name FROM  t_goods g,  t_category c
        WHERE g.category_id = c.category_id LIMIT 10
    </select>



    <resultMap id="rmGoods" type="indi.chester.mybatis.dto.GoodsDTO">
        <id property="goods.goodsId" column="goods_id"></id>
        <result property="goods.title" column="title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="categoryName" column="category_name"></result>
    </resultMap>
    <select id="selectGoodsDTO"  resultMap="rmGoods">
        select g.*, c.category_name FROM t_goods g, t_category c
        WHERE g.category_id = c.category_id LIMIT 10
    </select>

    <insert id="insert" parameterType="indi.chester.mybatis.entity.Goods">
        INSERT INTO babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,category_id)
        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
            <!-- 会在插入数据表以后, 将新的 goods_id 字段赋值回 Goods.goodsId-->
            <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
                select  last_insert_id();
            </selectKey>
    </insert>

    <insert id="insert2" parameterType="indi.chester.mybatis.entity.Goods"
            useGeneratedKeys="true" keyProperty="goodsId" keyColumn="goods_id">
        INSERT INTO babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,category_id)
        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
    </insert>



    <update id="update" parameterType="indi.chester.mybatis.entity.Goods">
        UPDATE babytun.t_goods
        SET
            title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        WHERE goods_id=#{goodsId}
    </update>

    <delete id="delete" parameterType="Integer">
        DELETE FROM  babytun.t_goods WHERE  goods_id=#{value }
    </delete>

    <select id="selectByTitle" parameterType="java.util.Map" resultType="indi.chester.mybatis.entity.Goods">
        <!-- ${} 文本替换, 未经任何处理对SQL文本替换, SQL 注入攻击 -->
        <!-- SELECT  * FROM t_goods WHERE  title=${title} LIMIT 5 -->

        <!-- #{} 预编译传值, 防止 SQL 注入攻击 -->
        <!-- SELECT  * FROM  t_goods WHERE  title=#{title} -->

        <!-- 有的时候 使用原文 -->
        SELECT  * FROM  t_goods WHERE  title=#{title} ${order}
    </select>

    <!-- 动态SQL -->
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="indi.chester.mybatis.entity.Goods">
        SELECT  * FROM  t_goods
        <where>
            <if test="categoryId!=null">
                AND category_id=#{categoryId}
            </if>
            <if test="currentPrice!=null">
                AND current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>


    <!-- 将SELECT * FROM t_goods LIMIT 0,1 的结果转换为一个个Goods 对象, 然后将goods_id传入到
    goodsDetail.selectByGoodsId 中的查询语句进行查询,查询结果放回到 goodsDetailList-->
    <resultMap id="rmGoods1" type="indi.chester.mybatis.entity.Goods">
        <id column="goods_id" property="goodsId"/> <!-- 这一句也可以不写 -->
        <collection property="goodsDetailList" select="goodsDetail.selectByGoodsId"
                    column="goods_id"/>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        SELECT * FROM t_goods LIMIT 0,1;
    </select>

    <!-- INSERT INTO table
        VALUES ("a1","a2","a3"), ("b1","b2","b3"), (...) -->
    <select id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,category_id)
        VALUES
            <foreach collection="list" item="item" index="index" separator=",">
                (#{item.title}, #{item.subTitle}, #{item.originalCost}, #{item.currentPrice},
                #{item.discount},#{item.isFreeDelivery},#{item.categoryId})
            </foreach>
    </select>
    
    <select id="selectPage" resultType="indi.chester.mybatis.entity.Goods" >
        SELECT  * FROM  t_goods WHERE current_price &lt; 1000
    </select>


</mapper>

